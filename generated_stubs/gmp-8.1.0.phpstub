<?php
// Generated with PHP version 8.1.0 gmp version 8.1.0

const GMP_ROUND_ZERO = 0;
const GMP_ROUND_PLUSINF = 1;
const GMP_ROUND_MINUSINF = 2;
const GMP_VERSION = "6.1.2";
const GMP_MSW_FIRST = 1;
const GMP_LSW_FIRST = 2;
const GMP_LITTLE_ENDIAN = 4;
const GMP_BIG_ENDIAN = 8;
const GMP_NATIVE_ENDIAN = 16;
function gmp_init(string|int $num, int $base = 0) {}
function gmp_import(string $data, int $word_size = 1, int $flags = 17) {}
function gmp_export(GMP|string|int $num, int $word_size = 1, int $flags = 17) {}
function gmp_intval(GMP|string|int $num) {}
function gmp_strval(GMP|string|int $num, int $base = 10) {}
function gmp_add(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_sub(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_mul(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_div_qr(GMP|string|int $num1, GMP|string|int $num2, int $rounding_mode = 0) {}
function gmp_div_q(GMP|string|int $num1, GMP|string|int $num2, int $rounding_mode = 0) {}
function gmp_div_r(GMP|string|int $num1, GMP|string|int $num2, int $rounding_mode = 0) {}
function gmp_div(GMP|string|int $num1, GMP|string|int $num2, int $rounding_mode = 0) {}
function gmp_mod(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_divexact(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_neg(GMP|string|int $num) {}
function gmp_abs(GMP|string|int $num) {}
function gmp_fact(GMP|string|int $num) {}
function gmp_sqrt(GMP|string|int $num) {}
function gmp_sqrtrem(GMP|string|int $num) {}
function gmp_root(GMP|string|int $num, int $nth) {}
function gmp_rootrem(GMP|string|int $num, int $nth) {}
function gmp_pow(GMP|string|int $num, int $exponent) {}
function gmp_powm(GMP|string|int $num, GMP|string|int $exponent, GMP|string|int $modulus) {}
function gmp_perfect_square(GMP|string|int $num) {}
function gmp_perfect_power(GMP|string|int $num) {}
function gmp_prob_prime(GMP|string|int $num, int $repetitions = 10) {}
function gmp_gcd(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_gcdext(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_lcm(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_invert(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_jacobi(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_legendre(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_kronecker(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_cmp(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_sign(GMP|string|int $num) {}
function gmp_random_seed(GMP|string|int $seed) {}
function gmp_random_bits(int $bits) {}
function gmp_random_range(GMP|string|int $min, GMP|string|int $max) {}
function gmp_and(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_or(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_com(GMP|string|int $num) {}
function gmp_xor(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_setbit(GMP $num, int $index, bool $value = true) {}
function gmp_clrbit(GMP $num, int $index) {}
function gmp_testbit(GMP|string|int $num, int $index) {}
function gmp_scan0(GMP|string|int $num1, int $start) {}
function gmp_scan1(GMP|string|int $num1, int $start) {}
function gmp_popcount(GMP|string|int $num) {}
function gmp_hamdist(GMP|string|int $num1, GMP|string|int $num2) {}
function gmp_nextprime(GMP|string|int $num) {}
function gmp_binomial(GMP|string|int $n, int $k) {}
class GMP
{
    public function __serialize() : array
    {
    }

    public function __unserialize(array $data) : void
    {
    }
}

