<?php
// Generated with PHP version 8.1.0 ds version 1.4.0

namespace Ds;

interface Hashable
{
    public function hash();
    public function equals($obj) : bool;
}

namespace Ds;

interface Collection extends \IteratorAggregate, \Countable, \JsonSerializable
{
    public function clear();
    public function copy() : \Ds\Collection;
    public function isEmpty() : bool;
    public function toArray() : array;
}

namespace Ds;

interface Sequence extends Collection, \ArrayAccess
{
    public function allocate(int $capacity);
    public function capacity() : int;
    public function contains(... $values) : bool;
    public function filter(?callable $callback = null) : \Ds\Sequence;
    public function find($value);
    public function first();
    public function get(int $index);
    public function insert(int $index, ... $values);
    public function join(string $glue = null) : string;
    public function last();
    public function map(callable $callback) : \Ds\Sequence;
    public function merge($values) : \Ds\Sequence;
    public function pop();
    public function push(... $values);
    public function reduce(callable $callback, $initial = null);
    public function remove(int $index);
    public function reverse();
    public function rotate(int $rotations);
    public function set(int $index, $value);
    public function shift();
    public function slice(int $index, ?int $length = null) : \Ds\Sequence;
    public function sort(?callable $comparator = null);
    public function unshift(... $values);
}

namespace Ds;

final class Vector implements Sequence
{
    public const MIN_CAPACITY = 8;

    public function __construct($values = null)
    {
    }

    public function getIterator() : \Traversable
    {
    }

    public function allocate(int $capacity)
    {
    }

    public function apply(callable $callback)
    {
    }

    public function capacity() : int
    {
    }

    public function contains(... $values) : bool
    {
    }

    public function filter(?callable $callback = null) : \Ds\Sequence
    {
    }

    public function find($value)
    {
    }

    public function first()
    {
    }

    public function get(int $index)
    {
    }

    public function insert(int $index, ... $values)
    {
    }

    public function join(string $glue = null) : string
    {
    }

    public function last()
    {
    }

    public function map(callable $callback) : \Ds\Sequence
    {
    }

    public function merge($values) : \Ds\Sequence
    {
    }

    public function offsetExists($offset) : bool
    {
    }

    public function offsetGet(mixed $offset)
    {
    }

    public function offsetSet(mixed $offset, mixed $value)
    {
    }

    public function offsetUnset(mixed $offset)
    {
    }

    public function pop()
    {
    }

    public function push(... $values)
    {
    }

    public function reduce(callable $callback, $initial = null)
    {
    }

    public function remove(int $index)
    {
    }

    public function reverse()
    {
    }

    public function reversed() : \Ds\Sequence
    {
    }

    public function rotate(int $rotations)
    {
    }

    public function set(int $index, $value)
    {
    }

    public function shift()
    {
    }

    public function slice(int $index, ?int $length = null) : \Ds\Sequence
    {
    }

    public function sort(?callable $comparator = null)
    {
    }

    public function sorted(?callable $comparator = null) : \Ds\Sequence
    {
    }

    public function sum()
    {
    }

    public function unshift(... $values)
    {
    }

    public function clear()
    {
    }

    public function copy() : \Ds\Collection
    {
    }

    public function count() : int
    {
    }

    public function isEmpty() : bool
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }
}

namespace Ds;

final class Deque implements Sequence
{
    public const MIN_CAPACITY = 8;

    public function __construct($values = null)
    {
    }

    public function getIterator() : \Traversable
    {
    }

    public function clear()
    {
    }

    public function copy() : \Ds\Collection
    {
    }

    public function count() : int
    {
    }

    public function isEmpty() : bool
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }

    public function allocate(int $capacity)
    {
    }

    public function apply(callable $callback)
    {
    }

    public function capacity() : int
    {
    }

    public function contains(... $values) : bool
    {
    }

    public function filter(?callable $callback = null) : \Ds\Sequence
    {
    }

    public function find($value)
    {
    }

    public function first()
    {
    }

    public function get(int $index)
    {
    }

    public function insert(int $index, ... $values)
    {
    }

    public function join(string $glue = null) : string
    {
    }

    public function last()
    {
    }

    public function map(callable $callback) : \Ds\Sequence
    {
    }

    public function merge($values) : \Ds\Sequence
    {
    }

    public function offsetExists($offset) : bool
    {
    }

    public function offsetGet(mixed $offset)
    {
    }

    public function offsetSet(mixed $offset, mixed $value)
    {
    }

    public function offsetUnset(mixed $offset)
    {
    }

    public function pop()
    {
    }

    public function push(... $values)
    {
    }

    public function reduce(callable $callback, $initial = null)
    {
    }

    public function remove(int $index)
    {
    }

    public function reverse()
    {
    }

    public function reversed() : \Ds\Sequence
    {
    }

    public function rotate(int $rotations)
    {
    }

    public function set(int $index, $value)
    {
    }

    public function shift()
    {
    }

    public function slice(int $index, ?int $length = null) : \Ds\Sequence
    {
    }

    public function sort(?callable $comparator = null)
    {
    }

    public function sorted(?callable $comparator = null) : \Ds\Sequence
    {
    }

    public function sum()
    {
    }

    public function unshift(... $values)
    {
    }
}

namespace Ds;

final class Stack implements Collection, \ArrayAccess
{
    public function __construct($values = null)
    {
    }

    public function allocate(int $capacity)
    {
    }

    public function capacity() : int
    {
    }

    public function peek()
    {
    }

    public function pop()
    {
    }

    public function push(... $values)
    {
    }

    public function getIterator() : \Traversable
    {
    }

    public function offsetExists($offset) : bool
    {
    }

    public function offsetGet(mixed $offset)
    {
    }

    public function offsetSet(mixed $offset, mixed $value)
    {
    }

    public function offsetUnset(mixed $offset)
    {
    }

    public function clear()
    {
    }

    public function copy() : \Ds\Collection
    {
    }

    public function count() : int
    {
    }

    public function isEmpty() : bool
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }
}

namespace Ds;

final class Queue implements Collection, \ArrayAccess
{
    public const MIN_CAPACITY = 8;

    public function __construct($values = null)
    {
    }

    public function allocate(int $capacity)
    {
    }

    public function capacity() : int
    {
    }

    public function peek()
    {
    }

    public function pop()
    {
    }

    public function push(... $values)
    {
    }

    public function getIterator() : \Traversable
    {
    }

    public function offsetExists($offset) : bool
    {
    }

    public function offsetGet(mixed $offset)
    {
    }

    public function offsetSet(mixed $offset, mixed $value)
    {
    }

    public function offsetUnset(mixed $offset)
    {
    }

    public function clear()
    {
    }

    public function copy() : \Ds\Collection
    {
    }

    public function count() : int
    {
    }

    public function isEmpty() : bool
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }
}

namespace Ds;

final class Map implements Collection, \ArrayAccess
{
    public const MIN_CAPACITY = 8;

    public function __construct($values = null)
    {
    }

    public function allocate(int $capacity)
    {
    }

    public function apply(callable $callback)
    {
    }

    public function capacity() : int
    {
    }

    public function diff(\Ds\Map $map) : \Ds\Map
    {
    }

    public function filter(?callable $callback = null) : \Ds\Map
    {
    }

    public function first() : \Ds\Pair
    {
    }

    public function get($key, $default = null)
    {
    }

    public function hasKey($key) : bool
    {
    }

    public function hasValue($value) : bool
    {
    }

    public function intersect(\Ds\Map $map) : \Ds\Map
    {
    }

    public function keys() : \Ds\Set
    {
    }

    public function ksort(?callable $comparator = null)
    {
    }

    public function ksorted(?callable $comparator = null) : \Ds\Map
    {
    }

    public function last() : \Ds\Pair
    {
    }

    public function map(callable $callback) : \Ds\Map
    {
    }

    public function merge($values) : \Ds\Map
    {
    }

    public function pairs() : \Ds\Sequence
    {
    }

    public function put($key, $value)
    {
    }

    public function putAll($values)
    {
    }

    public function reduce(callable $callback, $initial = null)
    {
    }

    public function remove($key, $default = null)
    {
    }

    public function reverse()
    {
    }

    public function reversed() : \Ds\Map
    {
    }

    public function skip(int $position) : \Ds\Pair
    {
    }

    public function slice(int $index, ?int $length = null) : \Ds\Map
    {
    }

    public function sort(?callable $comparator = null)
    {
    }

    public function sorted(?callable $comparator = null) : \Ds\Map
    {
    }

    public function sum()
    {
    }

    public function union($map) : \Ds\Map
    {
    }

    public function values() : \Ds\Sequence
    {
    }

    public function xor(\Ds\Map $map) : \Ds\Map
    {
    }

    public function getIterator() : \Traversable
    {
    }

    public function offsetExists($offset) : bool
    {
    }

    public function offsetGet(mixed $offset)
    {
    }

    public function offsetSet(mixed $offset, mixed $value)
    {
    }

    public function offsetUnset(mixed $offset)
    {
    }

    public function clear()
    {
    }

    public function copy() : \Ds\Collection
    {
    }

    public function count() : int
    {
    }

    public function isEmpty() : bool
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }
}

namespace Ds;

final class Set implements Collection, \ArrayAccess
{
    public const MIN_CAPACITY = 8;

    public function __construct($values = null)
    {
    }

    public function add(... $values)
    {
    }

    public function allocate(int $capacity)
    {
    }

    public function capacity() : int
    {
    }

    public function contains(... $values) : bool
    {
    }

    public function diff(\Ds\Set $set) : \Ds\Set
    {
    }

    public function filter(?callable $predicate = null) : \Ds\Set
    {
    }

    public function first()
    {
    }

    public function get(int $index)
    {
    }

    public function intersect(\Ds\Set $set) : \Ds\Set
    {
    }

    public function join(string $glue = null)
    {
    }

    public function last()
    {
    }

    public function map(callable $callback) : \Ds\Set
    {
    }

    public function merge($values) : \Ds\Set
    {
    }

    public function reduce(callable $callback, $initial = null)
    {
    }

    public function remove(... $values)
    {
    }

    public function reverse()
    {
    }

    public function reversed() : \Ds\Set
    {
    }

    public function slice(int $index, ?int $length = null) : \Ds\Set
    {
    }

    public function sort(?callable $comparator = null)
    {
    }

    public function sorted(?callable $comparator = null) : \Ds\Set
    {
    }

    public function sum()
    {
    }

    public function union(\Ds\Set $set) : \Ds\Set
    {
    }

    public function xor(\Ds\Set $set) : \Ds\Set
    {
    }

    public function getIterator() : \Traversable
    {
    }

    public function offsetExists($offset) : bool
    {
    }

    public function offsetGet(mixed $offset)
    {
    }

    public function offsetSet(mixed $offset, mixed $value)
    {
    }

    public function offsetUnset(mixed $offset)
    {
    }

    public function clear()
    {
    }

    public function copy() : \Ds\Collection
    {
    }

    public function count() : int
    {
    }

    public function isEmpty() : bool
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }
}

namespace Ds;

final class PriorityQueue implements Collection
{
    public const MIN_CAPACITY = 8;

    public function __construct()
    {
    }

    public function allocate(int $capacity)
    {
    }

    public function capacity() : int
    {
    }

    public function peek()
    {
    }

    public function pop()
    {
    }

    public function push($value, $priority)
    {
    }

    public function getIterator() : \Traversable
    {
    }

    public function clear()
    {
    }

    public function copy() : \Ds\Collection
    {
    }

    public function count() : int
    {
    }

    public function isEmpty() : bool
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }
}

namespace Ds;

final class Pair implements \JsonSerializable
{
    public $key;

    public $value;

    public function __construct($key = null, $value = null)
    {
    }

    public function copy() : \Ds\Pair
    {
    }

    public function jsonSerialize()
    {
    }

    public function toArray() : array
    {
    }
}

